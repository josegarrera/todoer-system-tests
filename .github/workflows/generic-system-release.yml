name: Generic System Release Stage

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (acceptance, e2e, uat, prod)'
        required: true
        default: 'acceptance'

jobs:
  release:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [fe, task-manager, title-generator]

    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Get the latest image from Docker Hub for ${{ matrix.service }}
        id: get-latest-tag
        run: |
          LATEST_TAG=$(curl -s "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}/tags" | jq -r '.results | sort_by(.last_updated) | last(.[]).name')
          echo "The latest tag is: $LATEST_TAG"
          echo "::set-output name=LATEST_TAG::$LATEST_TAG"

      - name: SSH and Deploy to GCP VM
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ github.event.inputs.environment == 'acceptance' && secrets.ACCEPTANCE_VM_IP || github.event.inputs.environment == 'e2e' && secrets.E2E_VM_IP || github.event.inputs.environment == 'uat' && secrets.UAT_VM_IP || github.event.inputs.environment == 'prod' && secrets.PROD_VM_IP }}
          username: ${{ secrets.DOCKER_USERNAME }}
          key: ${{ github.event.inputs.environment == 'acceptance' && secrets.ACCEPTANCE_GCP_SSH_PRIVATE_KEY || github.event.inputs.environment == 'e2e' && secrets.E2E_GCP_SSH_PRIVATE_KEY || github.event.inputs.environment == 'uat' && secrets.UAT_GCP_SSH_PRIVATE_KEY || github.event.inputs.environment == 'prod' && secrets.PROD_GCP_SSH_PRIVATE_KEY }}
          script: |
            # Definir variables seg√∫n el entorno
            if [ "${{ github.event.inputs.environment }}" = "acceptance" ]; then
              API_URL="https://acceptance-api.example.com"
              DB_URI="${{ secrets.ACCEPTANCE_DB_URI }}"
            elif [ "${{ github.event.inputs.environment }}" = "e2e" ]; then
              API_URL="https://e2e-api.example.com"
              DB_URI="${{ secrets.E2E_DB_URI }}"
            elif [ "${{ github.event.inputs.environment }}" = "uat" ]; then
              API_URL="https://uat-api.example.com"
              DB_URI="${{ secrets.UAT_DB_URI }}"
            else
              API_URL="https://prod-api.example.com"
              DB_URI="${{ secrets.PROD_DB_URI }}"
            fi

            docker stop ${{ matrix.service }} || true
            docker rm ${{ matrix.service }} || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:${{ steps.get-latest-tag.outputs.LATEST_TAG }}

            if [ "${{ matrix.service }}" = "fe" ]; then
              docker run -d --name fe -p 80:80 \
                -e VITE_API_URL="$API_URL" \
                -e ENVIRONMENT="${{ github.event.inputs.environment }}" \
                ${{ secrets.DOCKER_USERNAME }}/fe:${{ steps.get-latest-tag.outputs.LATEST_TAG }}
            elif [ "${{ matrix.service }}" = "task-manager" ]; then
              docker run -d --name task-manager -p 3001:3001 \
                -e MONGO_URI="$DB_URI" \
                -e ENVIRONMENT="${{ github.event.inputs.environment }}" \
                ${{ secrets.DOCKER_USERNAME }}/task-manager:${{ steps.get-latest-tag.outputs.LATEST_TAG }}
            else
              docker run -d --name title-generator -p 3002:3002 \
                -e ENVIRONMENT="${{ github.event.inputs.environment }}" \
                ${{ secrets.DOCKER_USERNAME }}/title-generator:${{ steps.get-latest-tag.outputs.LATEST_TAG }}
            fi
